/**
 * 
 */
package uk.ac.manchester.cs.pronto.io;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLClassExpression;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLEntity;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyChange;
import org.semanticweb.owlapi.model.OWLOntologyChangeException;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.RemoveAxiom;

import aterm.ATermAppl;

import com.clarkparsia.pellet.owlapiv3.PelletReasoner;
import uk.ac.manchester.cs.pronto.ConditionalConstraint;
import uk.ac.manchester.cs.pronto.Constants;
import uk.ac.manchester.cs.pronto.PABoxImpl;
import uk.ac.manchester.cs.pronto.PTBoxImpl;
import uk.ac.manchester.cs.pronto.ProbKnowledgeBase;
import uk.ac.manchester.cs.pronto.exceptions.OntologyLoadingException;

/**
 * <p>Title: KBEmbeddedLoader</p>
 * 
 * <p>Description: 
 *  This class extracts a probabilistic part of KB from an actual ontology
 * </p>
 * 
 * <p>Copyright: Copyright (c) 2007, 2008</p>
 * 
 * <p>Company: Clark & Parsia, LLC. <http://www.clarkparsia.com></p>
 * 
 * @author pavel
 */
public class KBEmbeddedLoader implements ProntoLoader {

	private String m_classURI = null;	
	/* 
	 */
	public ProbKnowledgeBase load(String uri) throws OntologyLoadingException {

		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();

		try {
			
			return load(manager.loadOntology( IRI.create( uri ) ));

		} catch( OWLOntologyCreationException owce ) {

			owce.printStackTrace();
			
			throw new OntologyLoadingException(owce);
			
		} catch( OWLOntologyChangeException owce ) {

			owce.printStackTrace();
			
			throw new OntologyLoadingException(owce);
		}
	}
	
	public ProbKnowledgeBase load(OWLOntology ontology) throws OntologyLoadingException {
		
		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
		PelletReasoner reasoner = null;
		ProbKnowledgeBase pkb = new ProbKnowledgeBase();
		//This map is used to keep auto generated class names
		Map<String, OWLClassExpression> nameMap = new HashMap<String, OWLClassExpression>();		
		List<RemoveAxiom> raxList = new ArrayList<RemoveAxiom>();
		Set<OWLEntity> signature = new HashSet<OWLEntity>();

		try {
			
			Set<ConditionalConstraint> ccList =	
				ProntoLoaderUtils.loadDefaultConstraintsFromOWL(	ontology,
																	nameMap,
																	signature,
																	raxList,
																	Constants.PRONTO_CLASS_AUTO_IRI,
																	manager);	
			
			Map<ATermAppl, Set<ConditionalConstraint>> ccMap =
				ProntoLoaderUtils.loadConcreteConstraintsFromOWL(	ontology,
																	nameMap,
																	signature,
																	raxList,
																	Constants.PRONTO_CLASS_AUTO_IRI,
																	manager);
			
			addAutoGeneratedClassNames(manager, ontology, nameMap);
			/*
			 * Now we need to remove uncertain axioms from the classical part
			 * to prevent them from being asserted in a classical DL way
			 */
			manager.applyChanges(raxList);
			
			reasoner = new PelletReasoner(ontology, null);
			{
				PTBoxImpl ptbox = new PTBoxImpl(reasoner.getKB(), ontology, ccList );
				
				pkb.setPTBox( ptbox );
				pkb.setPABox( new PABoxImpl(ccMap ) );
			}

			pkb.preprocess();
			m_classURI = ontology.getOntologyID().getOntologyIRI().toString();
			
			return pkb;

		} catch( OWLOntologyChangeException owce ) {

			owce.printStackTrace();
			
			throw new OntologyLoadingException(owce);
		}		
	}
	
	/*
	 * Declares auto generated class names in the ontology 
	 */
	private void addAutoGeneratedClassNames(OWLOntologyManager manager,
											OWLOntology ontology,
											Map<String, OWLClassExpression> nameMap) {
		
		OWLDataFactory factory = manager.getOWLDataFactory();
		List<OWLOntologyChange> changes = new ArrayList<OWLOntologyChange>();
		
		for (Map.Entry<String, OWLClassExpression> entry : nameMap.entrySet()) {
			
			OWLClass subClass = factory.getOWLClass( IRI.create(entry.getKey()) );
			OWLAxiom declAxiom = factory.getOWLEquivalentClassesAxiom( subClass, entry.getValue() );
			
			changes.addAll( manager.addAxiom( ontology, declAxiom ) );
		}
		
		manager.applyChanges( changes );
	}
	
	
	public String getClassicalOntologyURI() {
		
		return m_classURI;
	}

}
